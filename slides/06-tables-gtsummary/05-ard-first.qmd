# ARDs

## Where are the ARDs?

![](images/diagram-pkgs.png){fig-align="center"}

## Where are the ARDs?

::: {.columns .v-center-container}
::: {.column width="30%"}

- ARDs are the backbone for all calculations in gtsummary

- Every gtsummary table saves the ARDs from each calculation

:::

::: {.column width="70%"}

```{r}
#| label: 'summary-view-ard'
#| message: true
#| code-line-numbers: "2"
tbl <- tbl_summary(adsl, by = "ARM2", include = "AGE")
gather_ard(tbl)
```

:::
:::


## ARD + QC

ARDs are **wonderful** for QCing {gtsummary} tables. ðŸ˜»

- ARDs include the formatted and un-formatted numbers that appear in the table.

- Extract the ARD from the {gtsummary} table.

- Build fresh ARD from source data, and compare it to the ARD from the table.

## ARD + QC: Build and Compare ARDs

```{r}
#| label: build-ae-tbl-ard
ard_demog <- adsl |> 
  cards::ard_stack(
    cards::ard_summary(
      variables = "AGE",
      statistic = 
        AGE ~ cards::continuous_summary_fns(c("median", "p25", "p75"))
    ),
    .by = "ARM2", 
  )
```

The next step is to simply compare the two ARDs to confirm results.
As this is done programmatically, it is quick to repeat as data continues to accrue.

::: {.small}

There are numerous ways to compare objects in R.
We are currently developing a tool in {cards} that will streamline ARD comparison, with sensible defaults for ARDs.
Stay tuned! ðŸ“º
:::


# ARD-first tables

## ARD-first Tables

Similar to functions that accept a data frame, the package exports functions with nearly identical APIs that accept an ARD.

::: columns
::: {.column width="50%"}

```r
tbl_summary()

tbl_hierarchical()

tbl_continuous()

tbl_wide_summary()
```

:::
::: {.column width="50%"}

```r
tbl_ard_summary()

tbl_ard_hierarchical()

tbl_ard_continuous()

tbl_ard_wide_summary()
```

:::
:::

## ARD-first Tables

We can use the skills we learned earlier today to create ARDs for gtsummary tables.

```{r}
#| label: 'ard_stack'
#| output-location: "column"
#| message: true
library(cards)

ard <- ard_stack(
  data = adsl, 
  ard_summary(variables = AGE),
  ard_tabulate(variables = ETHNIC),
  ard_tabulate_value(variables = FEMALE),
  # add these for best-looking tables
  .attributes = TRUE, 
  .missing = TRUE 
)
ard
```

::: aside
::: {.small}

The `.attributes=TRUE` call adds column attributes, like labels, to the ARD table, which leads to better defaults by displaying the column labels in the table.

:::
:::

## ARD-first Tables

We can simply use the ARD from the previous slide, and pass it to `tbl_ard_summary()` for a summary table.

```{r}
#| label: 'tbl_ard_summary'
#| output-location: "column"

tbl_ard_summary(ard)
```

## ARD-first Table *Shells*

```{r}
#| label: 'tbl_ard_summary-mock'
#| output-location: "slide"
#| code-line-numbers: "10"
adsl |> 
  labelled::set_variable_labels(AGE = "Age, years") |> 
  ard_stack( 
    .by = ARM2,
    ard_tabulate(variables = ETHNIC),
    # add these for best-looking tables
    .attributes = TRUE, 
    .missing = TRUE 
  ) |> 
  cards::update_ard_fmt_fun(stat_names = c("n", "p"), fmt_fun = \(x) "xx") |> 
  tbl_ard_summary(
    by = ARM2,
    type = all_continuous() ~ "continuous2",
    statistic = all_continuous() ~ c("{mean} ({sd})", "{min} - {max}"),
    missing = "no"
  ) |> 
  modify_header(all_stat_cols() ~ "**{level}**  \nN = xx")
```

::: aside

You can also pass ARDs created with the `cards::mock_*()` functions if no data are available.

:::
