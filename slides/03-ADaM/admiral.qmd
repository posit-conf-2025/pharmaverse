

```{r}
#| include: false
library(glue)
library(countdown)
library(tibble)
library(admiral)
library(lubridate)

# Package hexes
metacore_img <- "https://raw.githubusercontent.com/atorus-research/metacore/master/man/figures/metacore.PNG"
metatools_img <- "https://raw.githubusercontent.com/pharmaverse/metatools/master/man/figures/metatools.png"
xportr_img <- "https://raw.githubusercontent.com/atorus-research/xportr/master/man/figures/logo.png"
admiral_img <- "https://raw.githubusercontent.com/pharmaverse/admiral/master/man/figures/logo.png"
pharmaverse_img <- "https://raw.githubusercontent.com/pharmaverse/pharmaverse-pkg/master/man/figures/banner.png"
dplyr_img <- "https://raw.githubusercontent.com/tidyverse/dplyr/master/man/figures/logo.png"
str_img <- "https://raw.githubusercontent.com/tidyverse/stringr/master/man/figures/logo.png"
haven_img <- "https://raw.githubusercontent.com/tidyverse/haven/master/man/figures/logo.png"
lub_img <- "https://raw.githubusercontent.com/tidyverse/lubridate/master/man/figures/logo.png"

# Set image sizes
img_bullet_size <- 80
img_right_size <- 150
img_center_size <- 300
```

## Objectives

::: incremental
-   By the end of this ADaM section you will have:
    - **Gained** an understanding of how to use `admiral`, `metatools/metacore`, and `xportr` packages to create       ADaMs
    - **Seen** code executed to create variables and records common to `ADSL` and `ADVS`.
    - **Seen** small code snippets of certain functions with play data.
    - **Checked** in on our fav participant - Barb.
    - **Completed** two short exercises using functions from admiral package.
:::

## Play by Play to achieve our Objectives

::: incremental
-   üïô11:00 - 11:15 Set the Stage: Overview of how we will work, datasets, specs, packages, functions

-   üï•11:15 - 11:40 Subject-level dataset: `ADSL`

-   üïö11:40 - 11:50 Check in on Barb / Exercise

-   üï¶11:50 - 12:20 Basic Data Structure: `ADVS`

-   üïö12:20 - 12:30 Check in on Barb / Exercise

-   üïö12:30 Lunch!
:::

## End to End with Barb!!

<div style="text-align: left;"> <img src="images/barb.png" alt="Barb!" style="width: 200px;"/> </div>
 
```{mermaid}
%%| echo: FALSE
flowchart LR
  A[Raw] --> B[SDTM]
  B[SDTM] --> C[ADaM]
  C[ADaM] --> D[ARD]
  D[ARD] --> E[TFL]
  
%% Apply the custom class "highlight" to node B
class C highlight;

%% Define the style for the "highlight" class:
classDef highlight fill:#F9B, stroke:#333, stroke-width:2px;  
```

* We are going to take a **glimpse** of where Barb is in `ADSL` and `ADVS`


# Set the Stage

üï•11:00 - 11:15

<div style="text-align: center;"> <img src="./images/office.jpg" alt="office" style="width: 600px;"/> </div>

## Set the Stage

::: incremental

*  How we will work for the next 90 minutes?
*  Data (SDTMs, `ADSL`, and `ADVS`)
*  Specs (Excel document with lots of tabs)
*  pharmaverse packages
    *  playing nice with tidyverse and base R!!
*  Functions to make ADaM variables and records.
:::

# How we will proceed today?

<div style="text-align: center;"> <img src="./images/possible.jpg" alt="office" style="width: 400px;"/> </div>


## How we will proceed today?

::: incremental
-   I will **pull out** certain functions of the  [`ADSL`](https://github.com/posit-conf-2025/pharmaverse/blob/main/slides/03-ADaM/scripts/adsl.R) and [`ADVS`](https://github.com/posit-conf-2025/pharmaverse/blob/main/slides/03-ADaM/scripts/advs.R) R scripts.
    - Let's take a quick peek at the [scripts](https://github.com/posit-conf-2025/pharmaverse/tree/main/slides/03-ADaM/scripts).
    -   I will discuss **certain** functions and function arguments from [scripts](https://github.com/posit-conf-2025/pharmaverse/tree/main/slides/03-ADaM/scripts) for deriving variables/records. 
    -   Will pull up full function arguments to briefly highlight other powers. üí°
    -   When possible will have some play data and mini-runs of the function. üè∏
:::

## How we will proceed today continued?

::: incremental
-   Two exercises set up to help explore two key functions discussed:
    - `derive_vars_dtm()` at end of `ADSL`.
    - `derive_param_computed()` at end of `ADVS`.
-   Brief notes on the code in script and exercises:
    -   Code in scripts should run out of the box.
    -   You can run now, but if something doesn't work let's fix at the exercises.
    -   Exercises will need some minor updates.
    -   3 folks not presenting can help diagnose issues during exercises. 
:::


# Datasets

## ADSL - Subject Level Dataset  

<div style="text-align: center;"> <img src="./images/adsl.png" alt="adsl" style="width: 700px;"/> </div>

* `ADSL` - Subject Level Dataset, i.e each subject has a record.  Focus on adding variables.
* We will use SDTM data from the [pharmaversesdtm package](https://pharmaverse.github.io/pharmaversesdtm/).  
* `ADSL` is available in the [pharmaverseadam package](https://pharmaverse.github.io/pharmaverseadam/)

## ADVS - Vital Signs Dataset

<div style="text-align: center;"> <img src="./images/advs.png" alt="advs" style="width: 700px;"/> </div>

* ADVS - Is a Basic Data Structure (BDS) Dataset. Focus on adding records, but also some variables!
* We will use SDTM data `vs` from the [pharmaversesdtm package](https://pharmaverse.github.io/pharmaversesdtm/) and
`ADSL` from [dataset](TBL) created by the `adsl.R` script.
* `ADVS` is available in the [pharmaverseadam package](https://pharmaverse.github.io/pharmaverseadam/)

# Specs

<div style="text-align: center;"> <img src="./images/specs.png" alt="sunny" style="width: 600px;"/> </div>

## Spec-details

- Gives specifics on how we derive variables in the ADaMs (extreme traceability)
- P21-like spec
    - P21 is spec/data validation tool widely used in the industry for creating and validating SDTMs
    and ADaMs.
- These specs are not fit for purpose - just a helpful guide
- What is in the the Specs:
  -   Two datasets, dataset labels and variable keys
  -   Variables - labels, lengths, types, linked to method
  -   Codelists / Control Terms!!
  
## Spec-peek

- Let's take a quick peek at [metadata](https://github.com/posit-conf-2025/pharmaverse/tree/main/slides/03-ADaM/metadata)

<div style="text-align: center;"> <img src="./images/specs_peek.png" alt="sunny" style="width: 600px;"/> </div>

## The core pharmaverse packages for creating ADaMs

`r glue("<img src={metacore_img} height='{img_bullet_size}' style='display:inline-block; vertical-align:middle; margin-right:0.3em;'/>")`
`r glue("<img src={metatools_img} height='{img_bullet_size}' style='display:inline-block; vertical-align:middle; margin-right:0.3em;'/>")`

Focus on **applying** information from our Specs to the ADaMs

`r glue("<img src={admiral_img} height='{img_bullet_size}' style='display:inline-block; vertical-align:middle; margin-right:0.3em;'/>")`

Focus on **deriving** variables and records driven by our Specs

`r glue("<img src={xportr_img} height='{img_bullet_size}' style='display:inline-block; vertical-align:middle; margin-right:0.3em;'/>")`

Focus on **preparing** the dataset as an xpt file to be sent to regulatory agencies.

## pharmaverse plays nice!

`r glue("<img src={dplyr_img} height='{img_bullet_size}' style='display:inline-block; vertical-align:middle; margin-right:0.3em;'/>")`
`r glue("<img src={str_img} height='{img_bullet_size}' style='display:inline-block; vertical-align:middle; margin-right:0.3em;'/>")`
`r glue("<img src={haven_img} height='{img_bullet_size}' style='display:inline-block; vertical-align:middle; margin-right:0.3em;'/>")`
`r glue("<img src={lub_img} height='{img_bullet_size}' style='display:inline-block; vertical-align:middle; margin-right:0.3em;'/>")`

::: incremental
- The ADaM code presented today utilizes all the previously mentioned packages, but also
makes use of tidyverse and base R code.

- If a function isn't meeting your needs or looks too cumbersome, then that is okay!

- These packages are all modular and play well with others. 
:::

## admiral {.smaller}

| Package | Function | Purpose |
|----|----|----|
| admiral | derive_vars_merged()        | `left_join` on steroids |
| admiral | derive_param_computed()     | Core function for wrappers used in ADVS |
| admiral | derive_vars_dy()            | Create the relative study day |
| admiral | derive_vars_dtm()           | Take a `---DTC` variable and turn it into a `---DTM` variable |
| admiral | derive_vars_duration()      | Duration between timepoints |
| admiral | restrict_derivation()       | HOF: Execute a derivation on a subset of the input dataset. |

Most functions in admiral follow these conventions:

::: {.incremental}

* `var_` or `_vars_` functions add variable(s) to ADaMs
* `_param_` functions add records to ADaMs
* Other not following this convention typically execute more advanced stuff!!

::: 

## metacore, metatools and xportr  {.smaller}

| Package | Function | Purpose |
|----|----|----|
| metacore    | spec_to_metacore()           | Creates a "special" object from your specs |
| metatools   | combine_supp()               | Join Parent and Supplementary Datasets |
| metatools   | create_var_from_codelist()   | Numeric Vars from Specs! |
| metatools   | drop_unspec_vars()           | Easily drop variables not in Spec |
| xportr      | xportr_label()               | Apply labels from Spec |
| xportr      | xportr_write()               | Write out an xpt file |

* Most functions from these packages are about applying metadata from specs to your dataset.
* xportr follows a standard naming convention with `xportr_`.

# `ADSL`

üï• 11:15 - 11:40


* Note: Referencing lines in file at each section with a footnote (Lines: ##-##)

## The Big Picture of `ADSL`

* We have an `ADSL` script:

::: {.incremental}
  
  * Using `{pharmaversesdtm}` data: `dm`, `suppdm`, `ex`, `ae`, `vs`, etc
  * Uses the `ADSL` section of our spec file
  * Creating a single record for each subject with a lot of variables.
  * 306 observations and 54 variables.
  * Write out an xpt file for regulatory send-off!
  
:::

## Reading in our spec for `ADSL` ^[Lines: 20-25 ]

```{.r code-line-numbers="1|2|3|4|5|6"}
adsl_spec <- spec_to_metacore(
  path = "slides/03-ADaM/metadata/posit_specs.xlsx",
  where_sep_sheet = FALSE,
  quiet = TRUE
) %>%
  select_dataset("ADSL")
```

* Takes a P21-like spec and makes it into an object we can easily access.
* `where_sep_sheet` - option to tell if the information for the dataset is in a separate sheet, like in older p21 specs or in a single sheet like newer p21 specs
* `quiet` argument should be set to `TRUE` while developing your spec and ADaMs.
* Same call in ADVS script.

## Combine Parent and Supplementary Data ^[Lines: 53]

```{.r}
dm_suppdm <- combine_supp(dm, suppdm)
```

* One line of code to join two datasets: parent and supplementary!
* Supps usually are a collection non-standard data and linking to parent
* Function is from `{metatools}`

## Let's turn a `--DTC` to a `*DTM` or `*DT` variable ^[Lines: 57-69, 132-136, 198-204]

```{.r code-line-numbers="1|2|3|4|5|6"}
ex_ext <- ex %>%
  derive_vars_dtm(
    dtc = EXSTDTC,
    new_vars_prefix = "EXST",
    time_imputation = "last",
    flag_imputation = "time"
)
```

```{.r code-line-numbers="1|2|3|4|5"}
ds_ext <- derive_vars_dt(
  ds,
  dtc = DSSTDTC,
  new_vars_prefix = "DSST"
)
```

```{.r code-line-numbers="1|2|3|4|5|6"}
adsl11 <- adsl10 %>%
  derive_vars_dt(
    dtc = DTHDTC,
    new_vars_prefix = "DTH",
    highest_imputation = "M",
    date_imputation = "first"
  )
```

## Example from documentation {.smaller}

```{r, message=FALSE}
mhdt <- tribble(
  ~MHSTDTC,
  "2019-07-18T15:25:40",
  "2019-07-18T15:25",
  "2019-07-18",
  "2019-02",
  "2019",
  "2019---07",
  ""
)

derive_vars_dtm(
 mhdt,
 new_vars_prefix = "AST",
 dtc = MHSTDTC,
 highest_imputation = "M",
 date_imputation = "last",
 time_imputation = "last",
)

```


## Woah...there is more!!

::: {.codewindow style="font-size: 0.6em;"}
```r
derive_vars_dtm(
  dataset,
  new_vars_prefix,
  dtc,
  highest_imputation = "h",
  date_imputation = "first",
  time_imputation = "first",
  flag_imputation = "auto",
  min_dates = NULL,
  max_dates = NULL,
  preserve = FALSE,
  ignore_seconds_flag = FALSE
)
```
:::

## A Simple merge ^[Lines: 187-194]

```{.r code-line-numbers="1|2|3|4|5|6"}
adsl10 <- adsl09 %>%
  derive_vars_merged(
    dataset_add = ds_ext,
    by_vars = exprs(STUDYID, USUBJID),
    new_vars = exprs(RANDDT = DSSTDT),
    filter_add = DSDECOD == "RANDOMIZED",
  )
```

* Filter, arrange, join and rename is a common pattern in ADaMs.
* `by_vars` are going to be the shared variables to connect the two datasets
* In admiral, all arguments which can be set to multiple variables, a calculation, or an assignment must be started with `rlang::exprs()`.
* Check out [Programming Concepts and Conventions](https://pharmaverse.github.io/admiral/cran-release/articles/concepts_conventions.html#exprs)


## Let's get a more complicated merge  ^[Lines: 72-84, and more!!]

```{.r code-line-numbers="1|2|3|4|5|6|7|8|9|10"}
derive_vars_merged(
  dataset_add = ex_ext,
  by_vars = exprs(STUDYID, USUBJID),
  order = exprs(EXSTDTM, EXSEQ),
  new_vars = exprs(TRTSDTM = EXSTDTM, TRTSTMF = EXSTTMF),
  filter_add = (EXDOSE > 0 |
    (EXDOSE == 0 &
      str_detect(EXTRT, "PLACEBO"))) &
    !is.na(EXSTDTM),
  mode = "first",
)
```

* `order` - for each by group the first or last observation from the additional dataset is selected with respect to the specified order.
* `mode` - Determines if the first or last observation is selected

## Whoa!!! Way more options!!

::: {.codewindow style="font-size: 0.6em;"}
```r
derive_vars_merged(
  dataset,
  dataset_add,
  by_vars,
  order = NULL,
  new_vars = NULL,
  filter_add = NULL,
  mode = NULL,
  exist_flag = NULL,
  true_value = "Y",
  false_value = NA_character_,
  missing_values = NULL,
  check_type = "warning",
  duplicate_msg = NULL,
  relationship = NULL
)
```
:::

## Let's derive a Duration Variable ^[Lines: 122-126]

```{.r code-line-numbers="1|2|3|4"}
derive_vars_duration(
    new_var = DTHADY,
    start_date = TRTSDT,
    end_date = DTHDT
  )
```

## Example from documentation {.smaller}

```{r}
# Derive age in years
data <- tribble(
  ~USUBJID, ~BRTHDT,           ~RANDDT,
  "P01",    ymd("1984-09-06"), ymd("2020-02-24"),
  "P02",    ymd("1985-01-01"), NA,
  "P03",    NA,                ymd("2021-03-10"),
  "P04",    NA,                NA
)

derive_vars_duration(data,
  new_var = AAGE,
  new_var_unit = AAGEU,
  start_date = BRTHDT,
  end_date = RANDDT,
  out_unit = "years",
  add_one = FALSE,
  trunc_out = TRUE
)
```

## Ohhh there is more!!

::: {.codewindow style="font-size: 0.6em;"}
```r
derive_vars_duration(
  dataset,
  new_var,
  new_var_unit = NULL,
  start_date,
  end_date,
  in_unit = "days",
  out_unit = "DAYS",
  floor_in = TRUE,
  add_one = TRUE,
  trunc_out = FALSE,
  type = "duration"
)
```
:::

## Duration versus Interval

* The lubridate package calculates two types of spans between two dates: duration and interval. While these calculations are largely the same, when the unit of the time period is month or year the result can be slightly different.

* The difference arises from the ambiguity in the length of "1 month" or "1 year". Months may have 31, 30, 28, or 29 days, and years are 365 days and 366 during leap years. Durations and intervals help solve the ambiguity in these measures.

## Let's apply Control Terms / Code Lists ^[Lines: 276-282]

```{.r}
adsl16 %>%
  create_var_from_codelist(adsl_spec, input_var = AGEGR1, out_var = AGEGR1N) %>%
  create_var_from_codelist(adsl_spec, input_var = RACE, out_var = RACEN) %>%
  create_var_from_codelist(adsl_spec, input_var = RACEGR1, out_var = RACEGR1N) %>%
  create_var_from_codelist(adsl_spec, input_var = REGION1, out_var = REGION1N) %>%
  create_var_from_codelist(adsl_spec, input_var = TRT01P, out_var = TRT01PN) %>%
  create_var_from_codelist(adsl_spec, input_var = TRT01A, out_var = TRT01AN)
```

* Numeric Variables like the above are helpful for sorting options in Tables.

## More details

::: {.codewindow style="font-size: 0.6em;"}
```r
create_var_from_codelist(
  data,
  metacore,
  input_var,
  out_var,
  codelist = NULL,
  decode_to_code = TRUE,
  strict = TRUE
)
```
:::

# Check in on Barb / Exercise 

üïö11:40 - 11:50

## Check in on Barb in `ADSL` {.smaller}

:::: {.columns}

::: {.column}
<div style="text-align: left;"> <img src="images/barb.png" alt="Barb!" style="width: 200px;"/> </div>

```{mermaid}
%%| echo: FALSE
flowchart LR
  B[SDTM] --> C[ADaM]
  C[ADaM] --> D[ARDs/TFLs]
  
%% Apply the custom class "highlight" to node B
class C highlight;

%% Define the style for the "highlight" class:
classDef highlight fill:#F9B, stroke:#333, stroke-width:2px;  
```

:::

::: {.column} 

* USUBJID:  01-701-1034
* SEX:      F
* AGE:      77
* RANDDT:   2014-07-01
* TRTSDT:   2014-07-01
* TRTSDTM:  2014-07-01 23:59:59
* TRTEDT:   2014-12-30
* TRTDURD:  183
* EOSDT:    2014-12-30
* EOSSTT:   COMPLETED

:::
::::

## Check-in Exercise {.smaller}

* Impute the date and time to be last month/day and 23:59:59
* Two arguments to update: `????`
* Check out admiral [`derive_vars_dtm()`](https://pharmaverse.github.io/admiral/cran-release/reference/derive_vars_dtm.html) documentation

```{r, eval = FALSE}
library(tibble)
library(lubridate)
library(admiral)

posit_mh <- tribble(
  ~USUBJID, ~MHSTDTC,
  1,        "2019-07-18T15:25:40",
  1,        "2019-07-18T15:25",
  1,        "2019-07-18",
  2,        "2024-02",
  2,        "2019",
  2,        "2019---07",
  3,        ""
)

derive_vars_dtm(
  dataset = posit_mh,
  new_vars_prefix = "AST",
  dtc = MHSTDTC,
  highest_imputation = "M",
  date_imputation = "????",
  time_imputation = "????"
)
```

## Check-in Exercise Solution {.smaller}

```{r}
posit_mh <- tribble(
  ~USUBJID, ~MHSTDTC,
  1,        "2019-07-18T15:25:40",
  1,        "2019-07-18T15:25",
  1,        "2019-07-18",
  2,        "2024-02",
  2,        "2019",
  2,        "2019---07",
  3,        ""
)

derive_vars_dtm(
  dataset = posit_mh,
  new_vars_prefix = "AST",
  dtc = MHSTDTC,
  highest_imputation = "M",
  date_imputation = "last",
  time_imputation = "last"
)

```


# `ADVS`

üï¶11:50 - 12:20

* Note: Referencing lines in file at each section with a footnote (Lines: ##-##)


## The Big Picture of ADVS

* We have an ADVS script:
  * Using `pharmaversesdtm` data: `vs`
  * Using the ADVS section of our spec file.
  * Creating **multiple records** for each subject.
  * Some `ADSL` variables included.
  * 60K records and 106 variables.
  * Lot's of functions are repeated within the `ADVS` script used in `ADSL` script.

## Let's talk about lookup tables ^[Lines: 72-80]

```{.r code-line-numbers="1|2|3|4|5|6"}
  derive_vars_merged_lookup(
    dataset_add = param_lookup,
    new_vars = exprs(PARAMCD),
    by_vars = exprs(VSTESTCD),
    print_not_mapped = TRUE 
  ) 
```

* Moving from `**TEST/**TESTCD` to `PARAM/PARAMCD`.
* More information in the `PARAM/PARAMCD` - useful for displays.
* Can be used for other lookup tables, e.g. Grading/Toxicity.

## A Fuller Look!

::: {.codewindow style="font-size: 0.6em;"}
```r
derive_vars_merged_lookup(
  dataset,
  dataset_add,
  by_vars,
  order = NULL,
  new_vars = NULL,
  mode = NULL,
  filter_add = NULL,
  check_type = "warning",
  duplicate_msg = NULL,
  print_not_mapped = TRUE
)
```
:::

## Let's add more records for each subject ^[Lines: 100-111]

```{.r code-line-numbers="1|2|3|4|5|6|7|8|9|10"}
advs <- advs %>%
  derive_param_computed(
    by_vars = exprs(STUDYID, USUBJID, VISIT, VISITNUM, ADT, ADY, VSTPT, VSTPTNUM),
    parameters = "WEIGHT",
    set_values_to = exprs(
      AVAL = AVAL.WEIGHT / (AVAL.HEIGHT / 100)^2,
      PARAMCD = "BMI",
      PARAM = "Body Mass Index (kg/m^2)",
      AVALU = "kg/m^2"
    ),
    constant_parameters = c("HEIGHT"),
    constant_by_vars = exprs(USUBJID)
)
```

## Only two arguments not used!

::: {.codewindow style="font-size: 0.6em;"}
```r
derive_param_computed(
  dataset = NULL,
  dataset_add = NULL,
  by_vars,
  parameters,
  set_values_to,
  filter = NULL,
  constant_by_vars = NULL,
  constant_parameters = NULL,
  keep_nas = FALSE
)
```
:::

## Let's derive DTYPE summary records ^[Lines: 144-153]

```{.r code-line-numbers="1|2|3|4|5|6|7|8|9"}
derive_summary_records(
    dataset_add = advs_2, 
    by_vars = exprs(STUDYID, USUBJID, !!!adsl_vars, PARAMCD, AVISITN, AVISIT, ADT, ADY, AVALU),
    filter_add = !is.na(AVAL),
    set_values_to = exprs(
      AVAL = mean(AVAL),
      DTYPE = "AVERAGE"
  )
)
```

* A DTYPE variable indicates a record within a parameter has been imputed or modified, 
DTYPE will indicate the method used to populate the analysis value, e.g AVERAGE,
MAXIMUM, MINIMUM, LOCF, PHANTOM.

## Let's restrict! ^[Lines: 196-210]

```{.r code-line-numbers="1|2|3|4|5|6|7|8|9|10|11|12"}
restrict_derivation(
  derivation = derive_var_extreme_flag,
  args = params(
    by_vars = exprs(STUDYID, USUBJID, BASETYPE, PARAMCD),
    order = exprs(ADT, VISITNUM, VSSEQ),
    new_var = ABLFL,
    mode = "last",
    true_value = "Y"
  ),
  filter = (!is.na(AVAL) &
    ADT <= TRTSDT & !is.na(BASETYPE) & is.na(DTYPE))
)
```

* Check out [Higher Order Functions](https://pharmaverse.github.io/admiral/cran-release/articles/higher_order.html)
for more information. 
* `call_derivation()` is super handy iF you are doing similar calls with same function,
but just changing one or two arguments.

## Let's add a BASE variable ^[Lines: 210-217]

```{.r code-line-numbers="1|2|3|4|5|6|7|"}
advs <- derive_var_base(
  advs,
  by_vars = exprs(STUDYID, USUBJID, PARAMCD, BASETYPE),
  source_var = AVAL,
  new_var = BASE,
  # Below arguments are default values and not necessary to add in our case
  filter = ABLFL == "Y"
)
```

* Used to calculate CHG and PCHG variables

## Let's add an Analysis Sequence Variable ^[Lines: 262-268]

```{.r code-line-numbers="1|2|3|4|5|6|7|"}
advs <- derive_var_obs_number(
  advs,
  new_var = ASEQ,
  by_vars = exprs(STUDYID, USUBJID),
  order = exprs(PARAMCD, ADT, AVISITN, VISITNUM, ATPTN, DTYPE),
  check_type = "error"
)
```

* ASEQ uniquely indexes records within a subject within an ADaM dataset.
* ASEQ is useful for traceability when the dataset is used as input to another ADaM dataset
* `check_type` - If "message", "warning" or "error" is specified, the specified message 
is issued if the observations of the input dataset are not unique with respect to the by variables and the order.

## Let's get that ADaM ready for regulatory agencies ^[Lines: 305-310]

```{.r code-line-numbers="1|2|3|4|5"}
advs_prefinal <- advs %>%
  drop_unspec_vars(advs_spec) %>% 
  check_variables(advs_spec, dataset_name = "ADVS") %>% 
  order_cols(advs_spec) %>% 
  sort_by_key(advs_spec) 
```

* Functions from `{metatools}`
* Note similar code in `ADSL` script!

## Let's get that data read for regulatory agencies ^[Lines: 313-319]

```{.r code-line-numbers="1|2|3|4|5|6|7"}
advs_final <- advs_prefinal %>%
  xportr_type(advs_spec) %>%
  xportr_length(advs_spec) %>%
  xportr_label(advs_spec) %>%
  xportr_format(advs_spec, domain = "ADVS") %>%
  xportr_df_label(advs_spec, domain = "ADVS") %>%
  xportr_write(file.path(dir, "advs.xpt"), metadata = advs_spec, domain = "ADVS")
```

* Functions from `{xportr}`
* Note similar code in `ADSL` script!
* `domain` is needed depending on how `metacore` object is created.

# Check in on Barb / Exercise

üï¶ 12:20 - 12:30

## Check in on Barb in ADVS

:::: {.columns}

::: {.column}
<div style="text-align: left;"> <img src="images/barb.png" alt="Barb!" style="width: 200px;"/> </div>

```{mermaid}
%%| echo: FALSE
flowchart LR
  B[SDTM] --> C[ADaM]
  C[ADaM] --> D[ARDs/TFLs]
  
%% Apply the custom class "highlight" to node B
class C highlight;

%% Define the style for the "highlight" class:
classDef highlight fill:#F9B, stroke:#333, stroke-width:2px;  
```

:::

::: {.column}
* USUBJID:  01-701-1034
* PARAM/PARAMCD: MAP / Mean Arterial Pressure (mmHg)
* ABLFL/ADT: Y / 2014-07-01
* BASE:   94.33333
* AVIST/ADT:  WEEK 2 / 2014-07-15
* AVAL:   115.0
* CHG:  20.6666667
* PCHG: 21.9081272
:::

::::


## Check-in Exercise {.smaller}

* We are going to update the function `derive_param_computed()` for Mean Arterial Pressure.
* Formula: $$ \frac{2DIABP + SYSBP}{3} $$

```{.r code-line-numbers="1|2|3|4|5|6|7"}
ADVS <- tribble(
  ~USUBJID,      ~PARAMCD, ~PARAM,                            ~AVALU,  ~AVAL, ~VISIT,
  "01-701-1015", "DIABP",  "Diastolic Blood Pressure (mmHg)", "mmHg",    51, "BASELINE",
  "01-701-1015", "SYSBP",  "Systolic Blood Pressure (mmHg)",  "mmHg",   121, "BASELINE",
  "01-701-1028", "DIABP",  "Diastolic Blood Pressure (mmHg)", "mmHg",    79, "BASELINE",
  "01-701-1028", "SYSBP",  "Systolic Blood Pressure (mmHg)",  "mmHg",   130, "BASELINE",
) 
```

```{.r code-line-numbers="1|2|3|4|5|6|7|8|9"}
derive_param_computed(
  ADVS,
  by_vars = exprs(USUBJID, VISIT),
  parameters = c("????", "????"),
  set_values_to = exprs(
    AVAL = (AVAL.SYSBP + ?? * AVAL.DIABP) / ??,
    PARAMCD = "MAP",
    PARAM = "Mean Arterial Pressure (mmHg)",
    AVALU = "mmHg",
  )
)
```

## Check-in Exercise Solution {.smaller}

```{r}
ADVS <- tribble(
  ~USUBJID,      ~PARAMCD, ~PARAM,                            ~AVALU,  ~AVAL, ~VISIT,
  "01-701-1015", "DIABP",  "Diastolic Blood Pressure (mmHg)", "mmHg",    51, "BASELINE",
  "01-701-1015", "SYSBP",  "Systolic Blood Pressure (mmHg)",  "mmHg",   121, "BASELINE",
  "01-701-1028", "DIABP",  "Diastolic Blood Pressure (mmHg)", "mmHg",    79, "BASELINE",
  "01-701-1028", "SYSBP",  "Systolic Blood Pressure (mmHg)",  "mmHg",   130, "BASELINE",
) 

derive_param_computed(
  ADVS,
  by_vars = exprs(USUBJID, VISIT),
  parameters = c("SYSBP", "DIABP"),
  set_values_to = exprs(
    AVAL = (AVAL.SYSBP + 2 * AVAL.DIABP) / 3,
    PARAMCD = "MAP",
    PARAM = "Mean Arterial Pressure (mmHg)",
    AVALU = "mmHg",
  )
)
```

## Questions and Resources

> -   [admiraldiscovery](https://pharmaverse.github.io/admiraldiscovery/)
> -   [pharmaverse examples](https://github.com/pharmaverse/examples)
> -   pkgdown sites for
>     [xportr](https://atorus-research.github.io/xportr/),
>     [metatools](https://pharmaverse.github.io/metatools/),
>     [metacore](https://atorus-research.github.io/metacore/) and
>     [admiral](https://pharmaverse.github.io/admiral/)
> -   Extension packages for admiral:
>     [admiralophtha](https://pharmaverse.github.io/admiralophtha/),
>     [admiralonco](https://pharmaverse.github.io/admiralonco/),
>     [admiralpeds](https://github.com/pharmaverse/admiralpeds)

## Closing Thoughts

> -   Only able to show a small number of `pharmaverse` packages
>     and functions today, but please delve deeper to explore the full
>     breadth
> -   If you'd like to contribute to `pharmaverse`, check out options at
>     [pharmaverse.org](https://pharmaverse.org/contribute/)
> -   Finally, be sure to join our community on
>     [Slack!](https://join.slack.com/t/pharmaverse/shared_invite/zt-yv5atkr4-Np2ytJ6W_QKz_4Olo7Jo9A)

## Packages and Session Information

```{r}
#| class-output: hscroll

sessionInfo()
```

```{css, echo=FALSE}
.hscroll {
  overflow-x: auto;
  white-space: nowrap;
}
```

